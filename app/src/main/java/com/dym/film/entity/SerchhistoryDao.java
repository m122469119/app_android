package com.dym.film.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.dym.film.manager.DatabaseManager;
import com.dym.film.manager.NetworkManager;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.QueryBuilder;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SERCHHISTORY".
*/
public class SerchhistoryDao extends AbstractDao<Serchhistory, Long> {

    public static final String TABLENAME = "SERCHHISTORY";

    /**
     * Properties of entity Serchhistory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Movie_id = new Property(1, String.class, "movie_id", false, "MOVIE_ID");
        public final static Property Movie_name = new Property(2, String.class, "movie_name", false, "MOVIE_NAME");
    };


    public SerchhistoryDao(DaoConfig config) {
        super(config);
    }
    
    public SerchhistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SERCHHISTORY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MOVIE_ID\" TEXT NOT NULL ," + // 1: movie_id
                "\"MOVIE_NAME\" TEXT NOT NULL );"); // 2: movie_name
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SERCHHISTORY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Serchhistory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getMovie_id());
        stmt.bindString(3, entity.getMovie_name());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Serchhistory readEntity(Cursor cursor, int offset) {
        Serchhistory entity = new Serchhistory( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // movie_id
            cursor.getString(offset + 2) // movie_name
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Serchhistory entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMovie_id(cursor.getString(offset + 1));
        entity.setMovie_name(cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Serchhistory entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Serchhistory entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }


    /**
     * 保存消息到数据库ng
     * 如果本地保存的消息超过20条，删除最老的条
     * @param message
     */
    public void saveUserHistroy(Serchhistory message)
    {
        DaoSession session = DatabaseManager.getInstance().getDaoSession();
        if (session != null) {
            SerchhistoryDao dao = session.getSerchhistoryDao();
            try {
                if(isSaved(dao,message.getMovie_id())){
                    isDeleted(dao,message.getMovie_id());
                    dao.insert(message);
                }
                else{
                    dao.insert(message);
                }
            }
            catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    /**
     * 查询某个表是否包含某个id:
     * @param ID
     * @return
     */
    public boolean isSaved(SerchhistoryDao dao ,String ID)
    {
        QueryBuilder<Serchhistory> qb = dao.queryBuilder();
        qb.where(Properties.Movie_id.eq(ID));
        qb.buildCount().count();
        return qb.buildCount().count() > 0 ? true : false;
    }

    /**
     * 查询某个表是否包含某个id:
     * @param ID
     * @return
     */
    public void isDeleted(SerchhistoryDao dao ,String ID)
    {
        QueryBuilder<Serchhistory> qb = dao.queryBuilder();
        qb.where(Properties.Movie_id.eq(ID));
        qb.buildCount().count();
        if(qb.buildCount().count() > 0 ? true : false)
        dao.deleteByKey(qb.list().get(0).getId());
    }

    /**
     * 查询所有
     * @param dao
     * @return
     */
    public List<Serchhistory> getHistroyList(SerchhistoryDao dao,int i)
    {
        if(i==-1){
            QueryBuilder<Serchhistory> qb = dao.queryBuilder();
            qb.orderDesc(Properties.Id);
            return qb.list();
        }else {
            QueryBuilder<Serchhistory> qb = dao.queryBuilder();
            qb.orderDesc(Properties.Id).limit(i);
            return qb.list();
        }
    }
    /**
     * 删除前5条
     * @param dao
     * @return
     */
    public void delectHistroyList(SerchhistoryDao dao)
    {
        QueryBuilder<Serchhistory> qb = dao.queryBuilder();
        qb.limit(5);
        for (Serchhistory serchhistory:qb.list()){
            dao.delete(serchhistory);
        }
    }





}
