package com.dym.film.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.dym.film.manager.DatabaseManager;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.QueryBuilder;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CINEMA".
*/
public class cinemaDao extends AbstractDao<cinema, Long> {

    public static final String TABLENAME = "CINEMA";

    /**
     * Properties of entity cinema.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CinemaID = new Property(1, String.class, "cinemaID", false, "CINEMA_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Address = new Property(3, String.class, "address", false, "ADDRESS");
        public final static Property Tel = new Property(4, String.class, "tel", false, "TEL");
        public final static Property MinPrice = new Property(5, String.class, "minPrice", false, "MIN_PRICE");
        public final static Property Lng = new Property(6, String.class, "lng", false, "LNG");
        public final static Property Lat = new Property(7, String.class, "lat", false, "LAT");
    };


    public cinemaDao(DaoConfig config) {
        super(config);
    }
    
    public cinemaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CINEMA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CINEMA_ID\" TEXT NOT NULL ," + // 1: cinemaID
                "\"NAME\" TEXT NOT NULL ," + // 2: name
                "\"ADDRESS\" TEXT NOT NULL ," + // 3: address
                "\"TEL\" TEXT," + // 4: tel
                "\"MIN_PRICE\" TEXT," + // 5: minPrice
                "\"LNG\" TEXT," + // 6: lng
                "\"LAT\" TEXT);"); // 7: lat
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CINEMA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, cinema entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getCinemaID());
        stmt.bindString(3, entity.getName());
        stmt.bindString(4, entity.getAddress());
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(5, tel);
        }
 
        String minPrice = entity.getMinPrice();
        if (minPrice != null) {
            stmt.bindString(6, minPrice);
        }
 
        String lng = entity.getLng();
        if (lng != null) {
            stmt.bindString(7, lng);
        }
 
        String lat = entity.getLat();
        if (lat != null) {
            stmt.bindString(8, lat);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public cinema readEntity(Cursor cursor, int offset) {
        cinema entity = new cinema( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // cinemaID
            cursor.getString(offset + 2), // name
            cursor.getString(offset + 3), // address
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tel
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // minPrice
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // lng
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // lat
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, cinema entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCinemaID(cursor.getString(offset + 1));
        entity.setName(cursor.getString(offset + 2));
        entity.setAddress(cursor.getString(offset + 3));
        entity.setTel(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMinPrice(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLng(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLat(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(cinema entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(cinema entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }


    /**
     * 查询某个表是否包含某个id:
     * @param ID
     * @return
     */
    public boolean isSaved(cinemaDao dao ,String ID)
    {
        QueryBuilder<cinema> qb = dao.queryBuilder();
        qb.where(Properties.CinemaID.eq(ID));
        qb.buildCount().count();
        return qb.buildCount().count() > 0 ? true : false;
    }

    /**
     * 查询某个表是否包含某个id:
     * @param ID
     * @return
     */
    public void isDeleted(cinemaDao dao ,String ID)
    {
        QueryBuilder<cinema> qb = dao.queryBuilder();
        qb.where(Properties.CinemaID.eq(ID));
        qb.buildCount().count();
        if(qb.buildCount().count() > 0 ? true : false)
            dao.deleteByKey(qb.list().get(0).getId());
    }


    /**
     * 查询所有
     * @param dao
     * @return
     */
    public List<cinema> getCinemaList(cinemaDao dao)
    {
            QueryBuilder<cinema> qb = dao.queryBuilder();
            qb.orderDesc(Properties.Id);
            return qb.list();
    }
    /**
     * 查询条数
     * @param dao
     * @return
     */
    public int getCinemaListCount(cinemaDao dao)
    {
            QueryBuilder<cinema> qb = dao.queryBuilder();
            qb.orderDesc(Properties.Id);
            return qb.list()==null?0:qb.list().size();
    }

    /**
     * 保存消息到数据库ng
     * 如果本地保存的消息超过20条，删除最老的条
     * @param message
     */
    public void saveCiname(cinemaDao dao,cinema message)
    {
            try {
//                if(isSaved(dao,message.getCinemaID())){
                    isDeleted(dao,message.getCinemaID());
//                    dao.insert(message);
//                }
//                else{
//                    dao.insert(message);
//                }
                dao.deleteAll();
                dao.insert(message);
            }
            catch (Exception e) {
                e.printStackTrace();
        }
    }

}
